//=============================================================================
//
// フェード処理 [fade.cpp]
// Author : HIROHIKO HAMAYA
//
//=============================================================================
#include "fade.h"
#include "polygon.h"
#include "sound.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define	FADE_RATE		(0.02f)		// フェード係数
#define FADE_RED		0.0f
#define FADE_GREEN		0.0f
#define FADE_BLUE		0.0f

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
// (なし)

//*****************************************************************************
// グローバル変数
//*****************************************************************************
static float			g_fAlpha = 1.0f;
static FADE				g_fade = FADE_IN;

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitFade(void)
{
	g_fAlpha = 1.0f;
	g_fade = FADE_IN;

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitFade(void)
{
	// (何もしない)
}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateFade(void)
{

	if(g_fade != FADE_NONE) {
		// フェード処理中
		if(g_fade == FADE_OUT) {
			// フェードアウト処理
			g_fAlpha += FADE_RATE;		// α値を加算して画面を消していく
			if (g_fAlpha >= 1.0f) {
				// フェードイン処理に切り替え
				g_fAlpha = 1.0f;
				SetFade(FADE_IN);

			}
			// ボリュームもフェードアウト
			SetVolume(1.0f - g_fAlpha);
		} else if (g_fade == FADE_IN) {
			// フェードイン処理
			g_fAlpha -= FADE_RATE;		// α値を減算して画面を浮き上がらせる
			if(g_fAlpha <= 0.0f) {
				// フェード処理終了
				g_fAlpha = 0.0f;
				SetFade(FADE_NONE);
			}
			// ボリュームもフェードイン
			SetVolume(1.0f - g_fAlpha);
		}
	}
}

//=============================================================================
// タイトル画面
//=============================================================================
void DrawFade(void)
{
		ID3D11DeviceContext* pDeviceContext = GetDeviceContext();

		SetPolygonTexture(nullptr);
		SetPolygonSize(SCREEN_X, SCREEN_Y);
		SetPolygonPos(0.0f, 0.0f);
		SetPolygonFrameSize(1.0f, 1.0f);
		SetPolygonUV(0.0f, 0.0f);
		SetPolygonColor(FADE_RED, FADE_GREEN, FADE_BLUE);
		SetPolygonAlpha(g_fAlpha);

		DrawPolygon(pDeviceContext);

		SetPolygonColor(1.0f, 1.0f, 1.0f);
		SetPolygonAlpha(1.0f);

}

//=============================================================================
// フェードの状態設定
//=============================================================================
void SetFade(FADE fade)
{
	g_fade = fade;
}

//=============================================================================
// フェードの状態取得
//=============================================================================
FADE GetFade(void)
{
	return g_fade;
}
